name: 🚀 Professional Laravel CI/CD Pipeline - AKS Deployment

on:
  push:
    branches: [ main, master, develop, staging, production ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - demo
      skip_tests:
        description: 'Skip Tests'
        required: false
        default: false
        type: boolean

env:
  # Azure Configuration
  AZURE_LOCATION: eastus
  ACR_REGISTRY: laravelacr
  AKS_CLUSTER: laravel-aks-cluster
  RESOURCE_GROUP: laravel-rg

  # Build Configuration
  TERRAFORM_VERSION: 1.6.0
  NODE_VERSION: 18
  PHP_VERSION: 8.2

  # Laravel repository - no subdirectory needed
  WORKING_DIRECTORY: .

jobs:
  # 🔍 Pre-flight Checks
  preflight:
    name: 🔍 Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.detect.outputs.environment }}
      deploy_infrastructure: ${{ steps.detect.outputs.deploy_infrastructure }}
      run_tests: ${{ steps.detect.outputs.run_tests }}
      deploy_application: ${{ steps.detect.outputs.deploy_application }}
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Detect Environment & Strategy
      id: detect
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          ENV="${{ github.event.inputs.environment }}"
          SKIP_TESTS="${{ github.event.inputs.skip_tests }}"
        elif [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
          ENV="production"
          SKIP_TESTS="false"
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          ENV="staging"
          SKIP_TESTS="false"
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          ENV="development"
          SKIP_TESTS="false"
        else
          ENV="demo"
          SKIP_TESTS="false"
        fi
        
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        echo "deploy_infrastructure=$([[ $ENV != "demo" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
        echo "run_tests=$([[ $SKIP_TESTS != "true" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
        echo "deploy_application=true" >> $GITHUB_OUTPUT
        
        echo "🎯 Environment: $ENV"
        echo "🏗️ Deploy Infrastructure: $([[ $ENV != "demo" ]] && echo "Yes" || echo "No")"
        echo "🧪 Run Tests: $([[ $SKIP_TESTS != "true" ]] && echo "Yes" || echo "No")"

  # 🏗️ Infrastructure Provisioning with Azure
  infrastructure:
    name: 🏗️ Azure Infrastructure Provisioning
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.deploy_infrastructure == 'true'
    environment: ${{ needs.preflight.outputs.environment }}
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🛠️ Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: 🔧 Terraform Init for Azure
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform
      run: |
        terraform init \
          -backend-config="storage_account_name=${{ secrets.AZURE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=terraform-state" \
          -backend-config="key=laravel-${{ needs.preflight.outputs.environment }}.tfstate" \
          -backend-config="resource_group_name=${{ secrets.AZURE_STORAGE_RG }}"

    - name: 📋 Terraform Plan for Azure
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform
      run: |
        terraform plan \
          -var="environment=${{ needs.preflight.outputs.environment }}" \
          -var="location=${{ env.AZURE_LOCATION }}" \
          -var="resource_group_name=${{ env.RESOURCE_GROUP }}" \
          -var="aks_cluster_name=${{ env.AKS_CLUSTER }}" \
          -var="acr_name=${{ env.ACR_REGISTRY }}" \
          -var="database_password=${{ secrets.DATABASE_PASSWORD }}" \
          -out=tfplan

    - name: 🚀 Terraform Apply for Azure
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform
      run: terraform apply -auto-approve tfplan

    - name: 📤 Export Azure Infrastructure Outputs
      working-directory: ${{ env.WORKING_DIRECTORY }}/terraform
      run: |
        echo "RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)" >> $GITHUB_ENV
        echo "AKS_CLUSTER_NAME=$(terraform output -raw aks_cluster_name)" >> $GITHUB_ENV
        echo "ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server)" >> $GITHUB_ENV
        echo "VNET_ID=$(terraform output -raw vnet_id)" >> $GITHUB_ENV

  # 🧪 Code Quality & Security Analysis
  code_analysis:
    name: 🧪 Code Quality & Security
    runs-on: ubuntu-latest
    needs: preflight
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, zip
        tools: composer, phpcs, phpstan

    - name: 📦 Install PHP Dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: composer install --prefer-dist --no-progress --no-suggest

    - name: 🔍 PHP Code Style Check
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        vendor/bin/phpcs --standard=PSR12 app/ --report=checkstyle --report-file=phpcs-report.xml || true

    - name: 🔬 PHP Static Analysis
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        vendor/bin/phpstan analyse app/ --level=5 --error-format=github || true

    - name: 🛡️ Security Vulnerability Scan
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        composer audit --format=json > security-report.json || true

    - name: 🌐 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

    - name: 📦 Install Node Dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm ci

    - name: 🎨 Frontend Linting
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        npm run lint:check || true

    - name: 🔒 Dependency Security Check
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        npm run security:audit || true

  # 🧪 Automated Testing
  testing:
    name: 🧪 Automated Testing
    runs-on: ubuntu-latest
    needs: [preflight, code_analysis]
    if: needs.preflight.outputs.run_tests == 'true'
    
    strategy:
      matrix:
        test-suite: [unit, feature, integration]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, zip, redis
        coverage: xdebug

    - name: 📦 Install Dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: composer install --prefer-dist --no-progress

    - name: 🔧 Setup Environment
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        cp .env.testing .env
        php artisan key:generate
        php artisan config:cache

    - name: 🗄️ Run Database Migrations
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: php artisan migrate --force

    - name: 🧪 Run Tests - ${{ matrix.test-suite }}
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        case "${{ matrix.test-suite }}" in
          "unit")
            php artisan test --testsuite=Unit --coverage-clover=coverage-unit.xml
            ;;
          "feature")
            php artisan test --testsuite=Feature --coverage-clover=coverage-feature.xml
            ;;
          "integration")
            php artisan test --filter=Integration --coverage-clover=coverage-integration.xml
            ;;
        esac

    - name: 📊 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: coverage-${{ matrix.test-suite }}.xml
        flags: ${{ matrix.test-suite }}

  # 🏗️ Build & Package
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [preflight, testing]
    if: always() && (needs.testing.result == 'success' || needs.preflight.outputs.run_tests == 'false')
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Azure Login
      if: needs.preflight.outputs.environment != 'demo'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🐳 Login to Azure Container Registry
      if: needs.preflight.outputs.environment != 'demo'
      id: login-acr
      run: |
        az acr login --name ${{ env.ACR_REGISTRY }}
        echo "registry=${{ env.ACR_REGISTRY }}.azurecr.io" >> $GITHUB_OUTPUT

    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ needs.preflight.outputs.environment != 'demo' && format('{0}.azurecr.io/laravel-app', env.ACR_REGISTRY) || 'local/laravel-app' }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.preflight.outputs.environment }}

    - name: 🏗️ Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ env.WORKING_DIRECTORY }}
        platforms: linux/amd64,linux/arm64
        push: ${{ needs.preflight.outputs.environment != 'demo' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          APP_ENV=${{ needs.preflight.outputs.environment }}
          BUILD_NUMBER=${{ github.run_number }}
          COMMIT_SHA=${{ github.sha }}

    - name: 🔒 Sign Container Image
      if: needs.preflight.outputs.environment == 'production'
      run: |
        echo "🔏 Signing container image for production..."
        # Add cosign or similar container signing here

    - name: 🛡️ Scan Container Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.meta.outputs.tags }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Security Scan Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 🚀 Deployment
  deploy:
    name: 🚀 Deploy to ${{ needs.preflight.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [preflight, infrastructure, build]
    if: always() && needs.build.result == 'success'
    environment:
      name: ${{ needs.preflight.outputs.environment }}
      url: ${{ steps.deploy.outputs.application_url }}
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Azure Login
      if: needs.preflight.outputs.environment != 'demo'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 🎯 Set AKS Context
      if: needs.preflight.outputs.environment != 'demo'
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: ${{ env.AKS_CLUSTER }}

    - name: 📝 Create Kubernetes Deployment Manifest
      if: needs.preflight.outputs.environment != 'demo'
      run: |
        cat > k8s-deployment.yaml << EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: laravel-app-${{ needs.preflight.outputs.environment }}
          namespace: ${{ needs.preflight.outputs.environment }}
        spec:
          replicas: ${{ needs.preflight.outputs.environment == 'production' && 3 || 2 }}
          selector:
            matchLabels:
              app: laravel-app
              environment: ${{ needs.preflight.outputs.environment }}
          template:
            metadata:
              labels:
                app: laravel-app
                environment: ${{ needs.preflight.outputs.environment }}
            spec:
              containers:
              - name: laravel-app
                image: ${{ needs.build.outputs.image_tag }}
                ports:
                - containerPort: 80
                env:
                - name: APP_ENV
                  value: "${{ needs.preflight.outputs.environment }}"
                - name: APP_DEBUG
                  value: "${{ needs.preflight.outputs.environment != 'production' }}"
                - name: LOG_LEVEL
                  value: "${{ needs.preflight.outputs.environment == 'production' && 'error' || 'debug' }}"
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "250m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: laravel-service-${{ needs.preflight.outputs.environment }}
          namespace: ${{ needs.preflight.outputs.environment }}
        spec:
          selector:
            app: laravel-app
            environment: ${{ needs.preflight.outputs.environment }}
          ports:
          - port: 80
            targetPort: 80
          type: LoadBalancer
        EOF

    - name: 🚀 Deploy to Azure Kubernetes Service
      if: needs.preflight.outputs.environment != 'demo'
      id: deploy
      run: |
        # Create namespace if it doesn't exist
        kubectl create namespace ${{ needs.preflight.outputs.environment }} --dry-run=client -o yaml | kubectl apply -f -

        # Apply the deployment
        kubectl apply -f k8s-deployment.yaml

        # Wait for deployment to be ready
        kubectl rollout status deployment/laravel-app-${{ needs.preflight.outputs.environment }} -n ${{ needs.preflight.outputs.environment }} --timeout=600s

        # Get service external IP
        EXTERNAL_IP=""
        for i in {1..30}; do
          EXTERNAL_IP=$(kubectl get service laravel-service-${{ needs.preflight.outputs.environment }} -n ${{ needs.preflight.outputs.environment }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          if [[ -n "$EXTERNAL_IP" ]]; then
            break
          fi
          echo "⏳ Waiting for external IP... (attempt $i/30)"
          sleep 10
        done

        if [[ -n "$EXTERNAL_IP" ]]; then
          echo "application_url=http://$EXTERNAL_IP" >> $GITHUB_OUTPUT
          echo "✅ Application deployed at: http://$EXTERNAL_IP"
        else
          echo "⚠️ Could not get external IP, using cluster IP"
          CLUSTER_IP=$(kubectl get service laravel-service-${{ needs.preflight.outputs.environment }} -n ${{ needs.preflight.outputs.environment }} -o jsonpath='{.spec.clusterIP}')
          echo "application_url=http://$CLUSTER_IP" >> $GITHUB_OUTPUT
        fi

    - name: 🧪 Demo Deployment (LocalStack)
      if: needs.preflight.outputs.environment == 'demo'
      run: |
        echo "🧪 Running LocalStack demo deployment..."
        docker run -d --name laravel-demo -p 8080:80 \
          -e APP_ENV=demo \
          -e APP_DEBUG=true \
          ${{ needs.build.outputs.image_tag }}

        echo "⏳ Waiting for application to start..."
        sleep 30

        echo "🔍 Testing application health..."
        curl -f http://localhost:8080/health || echo "Health check failed"

        echo "application_url=http://localhost:8080" >> $GITHUB_OUTPUT

    - name: 🔍 Post-Deployment Health Check
      run: |
        if [[ "${{ needs.preflight.outputs.environment }}" == "demo" ]]; then
          HEALTH_URL="http://localhost:8080/health"
        else
          HEALTH_URL="${{ steps.deploy.outputs.application_url }}/health"
        fi

        echo "🏥 Checking application health at: $HEALTH_URL"

        for i in {1..10}; do
          if curl -f "$HEALTH_URL" 2>/dev/null; then
            echo "✅ Health check passed!"
            break
          else
            echo "⏳ Attempt $i/10 failed, retrying in 30s..."
            sleep 30
          fi
        done

    - name: 🔄 Database Migration
      if: needs.preflight.outputs.environment != 'demo'
      run: |
        echo "🗄️ Running database migrations..."

        # Create migration job manifest
        cat > migration-job.yaml << EOF
        apiVersion: batch/v1
        kind: Job
        metadata:
          name: laravel-migration-$(date +%s)
          namespace: ${{ needs.preflight.outputs.environment }}
        spec:
          template:
            spec:
              containers:
              - name: laravel-migration
                image: ${{ needs.build.outputs.image_tag }}
                command: ["php", "artisan", "migrate", "--force"]
                env:
                - name: APP_ENV
                  value: "${{ needs.preflight.outputs.environment }}"
                - name: DB_HOST
                  valueFrom:
                    secretKeyRef:
                      name: laravel-secrets
                      key: db-host
                - name: DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: laravel-secrets
                      key: db-password
              restartPolicy: Never
          backoffLimit: 3
        EOF

        # Apply migration job
        kubectl apply -f migration-job.yaml

        # Wait for job completion
        JOB_NAME=$(kubectl get jobs -n ${{ needs.preflight.outputs.environment }} --sort-by=.metadata.creationTimestamp -o jsonpath='{.items[-1].metadata.name}')
        kubectl wait --for=condition=complete job/$JOB_NAME -n ${{ needs.preflight.outputs.environment }} --timeout=300s

        echo "✅ Database migration completed successfully"

  # 📊 Post-Deployment Testing
  post_deployment_tests:
    name: 📊 Post-Deployment Testing
    runs-on: ubuntu-latest
    needs: [preflight, deploy]
    if: always() && needs.deploy.result == 'success'
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🌐 Setup Node.js for E2E Tests
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 🧪 Install Testing Dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        npm install
        npx playwright install

    - name: 🎭 Run E2E Tests
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        if [[ "${{ needs.preflight.outputs.environment }}" == "demo" ]]; then
          BASE_URL="http://localhost:8080"
        else
          BASE_URL="${{ needs.deploy.outputs.application_url }}"
        fi

        echo "🎭 Running E2E tests against: $BASE_URL"
        npm run test:e2e -- --base-url="$BASE_URL"

    - name: 📈 Performance Testing
      run: |
        echo "📈 Running performance tests..."
        # Add performance testing tools like k6, Artillery, etc.

    - name: 🔒 Security Testing
      run: |
        echo "🔒 Running security tests..."
        # Add security testing tools like OWASP ZAP, etc.

  # 📊 Monitoring & Alerting Setup
  monitoring:
    name: 📊 Setup Monitoring
    runs-on: ubuntu-latest
    needs: [preflight, deploy]
    if: always() && needs.deploy.result == 'success' && needs.preflight.outputs.environment != 'demo'
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔐 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 📊 Setup CloudWatch Dashboards
      run: |
        echo "📊 Creating CloudWatch dashboard..."
        aws cloudwatch put-dashboard \
          --dashboard-name "Laravel-App-${{ needs.preflight.outputs.environment }}" \
          --dashboard-body file://${{ env.WORKING_DIRECTORY }}/monitoring/cloudwatch-dashboard.json

    - name: 🚨 Setup CloudWatch Alarms
      run: |
        echo "🚨 Creating CloudWatch alarms..."
        aws cloudwatch put-metric-alarm \
          --alarm-name "Laravel-App-High-CPU-${{ needs.preflight.outputs.environment }}" \
          --alarm-description "High CPU utilization" \
          --metric-name CPUUtilization \
          --namespace AWS/ECS \
          --statistic Average \
          --period 300 \
          --threshold 80 \
          --comparison-operator GreaterThanThreshold \
          --evaluation-periods 2

    - name: 📱 Setup SNS Notifications
      run: |
        echo "📱 Setting up SNS notifications..."
        # Configure SNS topics and subscriptions for alerts

  # 📋 Deployment Summary
  summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    needs: [preflight, infrastructure, code_analysis, testing, build, deploy, post_deployment_tests, monitoring]
    if: always()
    steps:
    - name: 📊 Generate Deployment Report
      run: |
        echo "# 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "| Stage | Status | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Pre-flight | ${{ needs.preflight.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Infrastructure | ${{ needs.infrastructure.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Code Analysis | ${{ needs.code_analysis.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Testing | ${{ needs.testing.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 🏗️ Build | ${{ needs.build.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 🚀 Deploy | ${{ needs.deploy.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 📊 Post-Deploy Tests | ${{ needs.post_deployment_tests.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 📊 Monitoring | ${{ needs.monitoring.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Environment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: ${{ needs.preflight.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

    - name: 📱 Send Notifications
      if: always()
      run: |
        if [[ "${{ needs.deploy.result }}" == "success" ]]; then
          echo "✅ Deployment successful! Sending success notification..."
          # Add Slack, Teams, or email notifications here
        else
          echo "❌ Deployment failed! Sending failure notification..."
          # Add failure notifications here
        fi
